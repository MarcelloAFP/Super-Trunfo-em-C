include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define NUM_CARTAS 32
#define NUM_ATRIBUTOS 3

typedef struct {
    char nome[50];
    int atributos[NUM_ATRIBUTOS];
} Carta;

Carta baralho[NUM_CARTAS];

void criarBaralho() {
    // Exemplo de cartas (você pode personalizar)
    strcpy(baralho[0].nome, "Carro A");
    baralho[0].atributos[0] = 200; // Velocidade
    baralho[0].atributos[1] = 150; // Potencia
    baralho[0].atributos[2] = 10;  // Consumo

    strcpy(baralho[1].nome, "Carro B");
    baralho[1].atributos[0] = 180;
    baralho[1].atributos[1] = 180;
    baralho[1].atributos[2] = 12;

    // ... continue preenchendo o baralho ...
}

void embaralharBaralho() {
    srand(time(NULL));
    for (int i = NUM_CARTAS - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        Carta temp = baralho[i];
        baralho[i] = baralho[j];
        baralho[j] = temp;
    }
}

void distribuirCartas(Carta jogador1[], Carta jogador2[]) {
    for (int i = 0; i < NUM_CARTAS; i++) {
        if (i % 2 == 0) {
            jogador1[i / 2] = baralho[i];
        } else {
            jogador2[i / 2] = baralho[i];
        }
    }
}

int compararAtributos(Carta carta1, Carta carta2, int atributo) {
    if (carta1.atributos[atributo] > carta2.atributos[atributo]) {
        return 1; // Jogador 1 vence
    } else if (carta1.atributos[atributo] < carta2.atributos[atributo]) {
        return 2; // Jogador 2 vence
    } else {
        return 0; // Empate
    }
}

void rodada(Carta jogador1[], Carta jogador2[], int *numCartasJogador1, int *numCartasJogador2) {
    int atributo;
    printf("Escolha o atributo (0, 1 ou 2): ");
    scanf("%d", &atributo);

    int vencedor = compararAtributos(jogador1[0], jogador2[0], atributo);

    if (vencedor == 1) {
        printf("Jogador 1 venceu a rodada!\n");
        // Move as cartas para o final da pilha do jogador 1
        Carta cartaVencedor1 = jogador1[0];
        Carta cartaVencedor2 = jogador2[0];
        for (int i = 0; i < *numCartasJogador1 - 1; i++) {
            jogador1[i] = jogador1[i + 1];
        }
        for (int i = 0; i < *numCartasJogador2 - 1; i++) {
            jogador2[i] = jogador2[i + 1];
        }
        jogador1[*numCartasJogador1 - 1] = cartaVencedor1;
        jogador1[*numCartasJogador1] = cartaVencedor2;
        (*numCartasJogador1)++;
        (*numCartasJogador2)--;
    } else if (vencedor == 2) {
        printf("Jogador 2 venceu a rodada!\n");
        // Move as cartas para o final da pilha do jogador 2
        Carta cartaVencedor1 = jogador1[0];
        Carta cartaVencedor2 = jogador2[0];
        for (int i = 0; i < *numCartasJogador1 - 1; i++) {
            jogador1[i] = jogador1[i + 1];
        }
        for (int i = 0; i < *numCartasJogador2 - 1; i++) {
            jogador2[i] = jogador2[i + 1];
        }
        jogador2[*numCartasJogador2 - 1] = cartaVencedor2;
        jogador2[*numCartasJogador2] = cartaVencedor1;
        (*numCartasJogador2)++;
        (*numCartasJogador1)--;
    } else {
        printf("Empate!\n");
        // As cartas vão para o final da pilha de cada um
        Carta cartaEmpate1 = jogador1[0];
        Carta cartaEmpate2 = jogador2[0];
        for (int i = 0; i < *numCartasJogador1 - 1; i++) {
            jogador1[i] = jogador1[i + 1];
        }
        for (int i = 0; i < *numCartasJogador2 - 1; i++) {
            jogador2[i] = jogador2[i + 1];
        }
        jogador1[*numCartasJogador1 - 1] = cartaEmpate1;
        jogador2[*numCartasJogador2 - 1] = cartaEmpate2;
    }
}

int main() {
    criarBaralho();
    embaralharBaralho();

    Carta jogador1[NUM_CARTAS / 2], jogador2[NUM_CARTAS / 2];
    distribuirCartas(jogador1, jogador2);

    int numCartasJogador1 = NUM_CARTAS / 2;
    int numCartasJogador2 = NUM_CARTAS / 2;

    while (numCartasJogador1 > 0 && numCartasJogador2 > 0) {
        rodada(jogador1, jogador2, &numCartasJogador1, &numCartasJogador2);
    }

    if (numCartasJogador1 > 0) {
        printf("Jogador 1 venceu o jogo!\n");
    } else {
        printf("Jogador 2 venceu o jogo!\n");
    }

    return 0;
}
